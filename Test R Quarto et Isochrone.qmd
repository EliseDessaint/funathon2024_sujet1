# Funathon 2024 - Sujet 1

## Interaction avec l'API de TravelTime

On créé une fonction qui envoie une requête contenant un JSON à l'endpoint d'une API de TravelTime grâce à la bibliothèque "httr"

```{r}
library(httr)
ISOCHRONE_API_URL <- "https://api.app.com/v4/time-map"
X_API_ID <- "c32b3037"
X_API_KEY <- "c0c067d7cddbdb9acbd6389ef5b73aae"

getTraveltimeAPIResponse <- function(api_url, json){
  # On prépare les headers
  headers <- httr::add_headers("Content-Type" = "application/json",
                               "X-Application-Id" = X_API_ID,
                               "X-Api-Key" = X_API_KEY)
  # On envoie la requête avec les headers spécifiés
  response <- httr::POST(api_url, body = json, encode = "json", headers)
  # On récupère le contenu de la réponse
  content <- httr::content(response)
  # On récupère le code de la réponse
  code <- httr::status_code(response)
  return(list(content, code))
}
```

On créé un JSON à partir de la documentation de l'API (playground disponible [ici](https://playground.traveltime.com/isochrones)) avec les caractéristiques suivantes :

-   Lieu : Centre de Paris (48.8534, 2.3483)

-   Isochrone : 1h00

-   Mode de transport : Transport public (bus, métro, tram, train)

-   Date et heure : 2024-03-07 à 18h00 UTC

-   Flexibilité : 1h00

-   Le reste des paramètres par défaut

```{r}
json <- '{
  "departure_searches": [
    {
      "id": "isochrone-0",
      "coords": {
        "lat": 48.8534,
        "lng": 2.3483
      },
      "departure_time": "2024-03-07T18:00:00.000Z",
      "travel_time": 3600,
      "transportation": {
        "type": "public_transport",
        "walking_time": 900,
        "cycling_time_to_station": 100,
        "parking_time": 0,
        "boarding_time": 0,
        "driving_time_to_station": 1800,
        "pt_change_delay": 0,
        "disable_border_crossing": false
      },
      "level_of_detail": {
        "scale_type": "simple",
        "level": "medium"
      },
      "single_shape": false,
      "no_holes": false,
      "range": {
        "enabled": true,
        "width": 3600
      }
    }
  ]
}'
```

On questionne l'API avec la fonction et le json, et on regarde le contenu de la réponse de l'API

```{r}
response <- getTraveltimeAPIResponse(ISOCHRONE_API_URL, json)
View(response)
```

Après observation de la réponse, on extrait les données utiles de la réponse de l'API

```{r}
apiData <- response[[1]]$results[[1]]$shapes
View(apiData)

```

Après observation des données, on extrait le premier polygone de l'isochrone

```{r}
# On extrait le premier polygone de l'isochrone
rawShape1 <- apiData[[1]]$shell
# On initialise un dataframe vide
shape1 <- data.frame(lat = numeric(), lng = numeric())
# On parcourt chaque élément de rawShape1 pour le transformer en dataframe
for(currentPoint in rawShape1) {
  # On ajoute les coordonnées du point courant à shape1
  shape1 <- rbind(shape1, data.frame(lat = currentPoint$lat, lng = currentPoint$lng))
}
shape1
```

On extrait tous les polygones de l'isochrone dans une liste en faisant une boucle du code précédent

```{r}
shapeList <- list()
# On boucle sur chaque polygone de l'isochrone
for (i in 1:length(apiData)){
  
  
  # On extrait le n-ième polygone de l'isochrone
  rawShape <- response[[1]]$results[[1]]$shapes[[i]]$shell
  # On initialise un dataframe vide
  shape <- data.frame(lat = numeric(), lng = numeric())
  # On parcourt chaque élément de rawShape pour le transformer en dataframe
  for(currentPoint in rawShape) {
    # On ajoute les coordonnées du point courant à shape
    shape <- rbind(shape, data.frame(lat = currentPoint$lat, lng = currentPoint$lng))
  }
  
  
  # On ajoute le polygone à la liste
  shapeList[[length(shapeList)+1]] <- shape
}
```

## Affichage de la carte et de l'isochrone avec le package leaflet

On entre la clé API de Stadia Maps (créér un compte [ici](https://client.stadiamaps.com/signup/?utm_content=top_nav_signup&utm_source=marketing_site)) et on entre les liens des tuiles Stadia Maps pour les fonds de carte (autres URL de fonds de carte [ici](https://stadiamaps.com/themes/))

```{r}
STADIA_MAPS_API_KEY <- "e6f6cfad-a662-4589-b060-1d7eed6d88a3"

ALIDADE_SMOOTH_TILES_URL <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key="
OUTDOORS_TILES_URL <- "https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png?api_key="
ALIDADE_SATELLITE_TILES_URL <- "https://tiles.stadiamaps.com/tiles/alidade_satellite/{z}/{x}/{y}{r}.png?api_key="

# On passe la clé API dans les URL des tuiles
TILES_URL <- paste0(ALIDADE_SMOOTH_TILES_URL, STADIA_MAPS_API_KEY)

```

On créé une carte de base avec le fond de carte Stadia Maps

```{r}
leafletMap <- leaflet() %>%
  addTiles(urlTemplate = TILES_URL)

```

On boucle pour ajouter chaque polygone de shapeList à la carte

```{r}
for (s in shapeList) {
  leafletMap <- leafletMap %>% addPolygons(data = s, 
                                           ~lng, ~lat, 
                                           color = "#FF0000", 
                                           fillColor = "#FFAAAA", 
                                           fillOpacity = 0.5, 
                                           weight = 2)
}

```

On affiche la carte

```{r}
leafletMap
```

## Interaction avec l'API de routage de TravelTime

On créé un JSON à partir de la documentation de l'API (playground disponible [ici](https://playground.traveltime.com/routes)) avec les caractéristiques suivantes :

-   Lieu de départ : Paris (48.8534, 2.3483)

-   Lieu d'arrivée : Toulouse (43.6044, 1.4442)

-   Mode de transport : Transport public (bus, métro, tram, train)

-   Date et heure : 2024-03-07 à 18h00 UTC

-   Flexibilité : 12h00

-   Le reste des paramètres par défaut

```{r}
json <- '{
  "locations": [
    {
      "id": "point-from",
      "coords": {
        "lat": 48.8534,
        "lng": 2.3483
      }
    },
    {
      "id": "point-to-1",
      "coords": {
        "lat": 43.6044,
        "lng": 1.4442
      }
    }
  ],
  "departure_searches": [
    {
      "id": "departure-search",
      "transportation": {
        "type": "public_transport",
        "walking_time": 900,
        "cycling_time_to_station": 100,
        "parking_time": 0,
        "boarding_time": 0,
        "driving_time_to_station": 1800,
        "pt_change_delay": 0,
        "disable_border_crossing": false
      },
      "departure_location_id": "point-from",
      "arrival_location_ids": [
        "point-to-1"
      ],
      "departure_time": "2024-03-07T18:00:00.000Z",
      "properties": [
        "travel_time",
        "route"
      ],
      "range": {
        "enabled": true,
        "max_results": 5,
        "width": 43200
      }
    }
  ]
}'
```

On questionne l'API avec la fonction, et le json, et on regarde le contenu de la réponse de l'API

```{r}
ROUTES_API_URL <- "https://api.traveltimeapp.com/v4/routes"

response <- getTraveltimeAPIResponse(ROUTES_API_URL, json)
View(response)
```

Après observation de la réponse, on extrait les données utiles de la réponse de l'API

```{r}
apiData <- response[[1]]$results[[1]]$locations[[1]]$properties
View(apiData)
```

## Coordonnées des villes françaises

On utilise le package "osmdata" pour récupérer les coordonnées des villes françaises qui nous intéressent

```{r}
# On installe et on importe le package "osmdata"
install.packages("osmdata")
library(osmdata)

CITY_NAME <- "Lille"

# On obtient les coordonnées de la ville
coordinates <-  rowMeans(getbb(paste0(CITY_NAME,", France")))
coordinates

# On constate que la latitude et la longitude sont inversées, on les inverse
coordinates <- rev(coordinates)
names(coordinates) <- c("lat", "lng")
coordinates

```
On fait une fonction
```{r}
getCityCoordinates <- function(city){
  # On obtient les coordonnées de la ville
  coordinates <-  rowMeans(getbb(paste0(city,", France")))
  # On constate que la latitude et la longitude sont inversées, on les inverse
  coordinates <- rev(coordinates)
  names(coordinates) <- c("lat", "lng")
  return(coordinates)
}
```

## Temps de transport entre 2 villes

On créé une fonction qui prend en paramètre les noms de 2 villes et qui renvoie le temps de transport en heure entre ces 2 villes

```{r}
getTravelTimeBetweenCities <- function(city1, city2){
  # On récupère les coordonnées des villes
  coordinates1 <- getCityCoordinates(city1)
  coordinates2 <- getCityCoordinates(city2)
  
  # On créé le JSON pour l'API de routage en se basant sur celui de la sous-partie "Interaction avec l'API de routage de TravelTime"
  json <- paste0('{
  "locations": [
    {
      "id": "point-from",
      "coords": {
        "lat": ', coordinates1[1], ',
        "lng": ', coordinates1[2], '
      }
    },
    {
      "id": "point-to-1",
      "coords": {
        "lat": ', coordinates2[1], ',
        "lng": ', coordinates2[2], '
      }
    }
  ],
  "departure_searches": [
    {
      "id": "departure-search",
      "transportation": {
        "type": "public_transport",
        "walking_time": 900,
        "cycling_time_to_station": 100,
        "parking_time": 0,
        "boarding_time": 0,
        "driving_time_to_station": 1800,
        "pt_change_delay": 0,
        "disable_border_crossing": false
      },
      "departure_location_id": "point-from",
      "arrival_location_ids": [
        "point-to-1"
      ],
      "departure_time": "2024-03-07T18:00:00.000Z",
      "properties": [
        "travel_time",
        "route"
      ],
      "range": {
        "enabled": true,
        "max_results": 5,
        "width": 43200
      }
    }
  ]
}')
  
  # On questionne l'API de routage avec le json
  response <- getTraveltimeAPIResponse(ROUTES_API_URL, json)
  
  # On extrait les données utiles
  apiData <- response[[1]]$results[[1]]$locations[[1]]$properties
  
  # On boucle sur apiData pour récupérer les temps de trajet
  travelTimes <- c()
  for (i in 1:length(apiData)){
    # On convertit le temps de trajet en heures et on l'ajoute à travelTimes
    travelTime <- apiData[[i]]$travel_time / 3600
    travelTimes <- c(travelTimes, travelTime)
  }
  
  return(travelTimes)
}
```

On teste la fonction avec Toulouse et Montpellier

```{r}
timeTravels <- getTravelTimeBetweenCities("Toulouse", "Montpellier")
timeTravels
```


# Code annexe

## Interaction avec l'API de matrices temporelles de TravelTime

On créé un JSON à partir de la documentation de l'API (playground disponible [ici](https://playground.traveltime.com/travel-time-distance-matrix)) avec les caractéristiques suivantes :

-   Lieu de départ : Paris (48.8534, 2.3483)

-   Lieux d'arrivées : Lille (50.6365, 3.0635), Lyon (45.7578, 4.8320), Marseille (43.2965, 5.3698), Bordeaux (44.8378, -0.5792) et Toulouse (43.6044, 1.4442)

-   Durée maximum : 4h00

-   Mode de transport : Transport public (bus, métro, tram, train)

-   Date et heure : 2024-03-07 à 18h00 UTC

-   Flexibilité : 12h00

-   Le reste des paramètres par défaut

```{r}
json <- '{
  "locations": [
    {
      "id": "starting-location",
      "coords": {
        "lat": 48.8534,
        "lng": 2.3483
      }
    },
    {
      "id": "lille",
      "coords": {
        "lat": 50.6365,
        "lng": 3.0635
      }
    },
    {
      "id": "lyon",
      "coords": {
        "lat": 45.7578,
        "lng": -4.8320
      }
    },
    {
      "id": "marseille",
      "coords": {
        "lat": 43.2965,
        "lng": -5.3698
      }
    },
    {
      "id": "bordeaux",
      "coords": {
        "lat": 44.8378,
        "lng": -0.5792
      }
    },
    {
      "id": "toulouse",
      "coords": {
        "lat": 43.6044,
        "lng": 1.4442
      }
    }
  ],
  "departure_searches": [
    {
      "id": "Departure search",
      "arrival_location_ids": [
        "lille",
        "lyon",
        "marseille",
        "bordeaux",
        "toulouse"
      ],
      "departure_location_id": "starting-location",
      "departure_time": "2024-03-07T18:00:00.000Z",
      "travel_time": 14400,
      "properties": [
        "travel_time"
      ],
      "transportation": {
        "type": "public_transport",
        "walking_time": 900,
        "cycling_time_to_station": 100,
        "parking_time": 0,
        "boarding_time": 0,
        "driving_time_to_station": 1800,
        "pt_change_delay": 0,
        "disable_border_crossing": false
      },
      "range": {
        "enabled": true,
        "width": 43200,
        "max_results": 1
      }
    }
  ]
}'
```

On questionne l'API avec la fonction et le json, et on regarde le contenu de la réponse de l'API

```{r}
TIME_MATRIX_API_URL <- "https://api.traveltimeapp.com/v4/time-filter"

response <- getTraveltimeAPIResponse(TIME_MATRIX_API_URL, json)
View(response)
```

Après observation de la réponse, on extrait les données utiles de la réponse de l'API

```{r}
apiData <- response[[1]]$results[[1]]
View(apiData)
```
