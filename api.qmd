# Interaction avec l'API de routage de TravelTime

La première partie du sujet consiste à interroger basiquement l'API de routage de TravelTime qui permet obtenir des données de temps de trajet entre deux points définis par leurs coordoonées géographiques.

Nous allons tout d'abord vous présenter comment construire une requête pour communiquer avec l'API de [TravelTime](https://account.traveltime.com/) afin de récupérer les données de temps de trajet. Avant cela, il va falloir effectuer plusieurs étapes préliminaires.

:::{.callout-note}
## Qu'est ce qu'une API ?
Une API est une interface logicielle (Application Programming Interface) qui permet à des applications de communiquer entre elles. Ces interfaces utilisent en général des requêtes HTTP contenant des JSON pour envoyer et recevoir des données.
:::

Tout d'abord, il est nécessaire de créer un compte sur [TravelTime](https://account.traveltime.com/) afin de pouvoir accéder à leur API grâce à un identifiant et un mot de passe. Si vous avez un compte Github, l'authentification via ce canal est plus simple.

Une fois que votre compte est créé, lorsque vous vous dirigez vers l'onglet `Dashboard` vous devriez avoir accès à votre ID et votre clé pour communiquer avec l'API, nous allons les stocker dans une fichier `.yaml` Ces informations sont personnelles et ne doivent pas être partagées, et encore moins être mises sur Github.

:::{.callout-note}
## Qu'est ce qu'un fichier yaml ?
C'est un format de fichier simplifié qui permet de stocker des données structurées à la manière d'un fomart CSV, JSON ou XML. Il est souvent utilisé pour stocker des configurations de programme.
:::

::: {.callout-tip collapse="false" icon=false}
## `<i class="bi bi-book"></i>`{=html} Exercice 1 :

1. Après avoir créé votre compte sur [TravelTime](https://account.traveltime.com/) et récupéré vos identifiants, stockez les dans un fichier `secret.yaml` comme ci-dessous : 

   ```{.yaml filename="secret.yaml"}
   travelTime:
     X_API_ID: "votre_id_api_ici"
     X_API_KEY: "votre_clé_api_ici"
   ```

2. Afin de prévenir un malencontreux commit de ce fichier, rajoutez le dans le `.gitignore` du projet afin qu'il ne puisse pas être *poussé* sur Github.

   ```{.yaml filename=".gitignore"}
   /.quarto/
   /_site/
   secrets.yaml
   ```

3. Nous allons dorénavant pouvoir tester l'API, mais avant toute chose, prenez le temps de jeter un coup d'oeil à la documentation de l'API ([ici](https://docs.traveltime.com/api/overview/introduction)). Vous pouvez également vous rendre sur le [*playground*](https://playground.traveltime.com/routes) de l'API pour vous familiariser avec son fonctionnement.

Afin de vérifier que nous arrivons à communiquer avec l'API, nous allons effectuer la même requête présentée dans le playground directement dans notre console R.
 
4. Grâce au package `yaml`, importez le contenu du fichier `secret.yaml` et stocker le contenu dans les variables `X_API_ID` et `X_API_KEY`.


```{r}
#| eval: true
#| code-fold: true
#| code-summary: Cliquez pour voir la réponse
#| code-overflow: scroll

secrets <- yaml::read_yaml("secrets.yaml")
X_API_ID <- secrets$travelTime$X_API_ID
X_API_KEY <- secrets$travelTime$X_API_KEY
```


5. En lisant la documentation, ou en observant bien le *playgroud* trouvez le *endpoint* de l'API de routage. Il s'agit de l'URL via lequel nous allons communiquer avec l'API. Stockez la dans la variable `ROUTES_API_URL`.

```{r}
#| eval: true
#| code-fold: true
#| code-summary: Cliquez pour voir la réponse
#| code-overflow: scroll

ROUTES_API_URL <- "https://api.traveltimeapp.com/v4/routes"
```


6. Copier-coller la requête utilisée dans l'exemple du *playground*. Il s'agit du corps de la requête, généralement celui-ci est spécifié au format JSON.


```{r}
#| eval: true
#| code-fold: true
#| code-summary: Cliquez pour voir la réponse
#| code-overflow: scroll

json <- '
{
  "locations": [
    {
      "id": "point-from",
      "coords": {
        "lat": 51.5119637,
        "lng": -0.1279543
      }
    },
    {
      "id": "point-to-1",
      "coords": {
        "lat": 51.5156177,
        "lng": -0.0919983
      }
    }
  ],
  "departure_searches": [
    {
      "id": "departure-search",
      "transportation": {
        "type": "public_transport"
      },
      "departure_location_id": "point-from",
      "arrival_location_ids": [
        "point-to-1"
      ],
      "departure_time": "2024-06-05T07:00:00.000Z",
      "properties": [
        "travel_time",
        "route"
      ],
      "range": {
        "enabled": true,
        "max_results": 5,
        "width": 900
      }
    }
  ]
}'
```

7. Avec le package `httr`, définissez l'en-tête de votre requête, celle-ci doit contenir votre ID et votre clé afin que l'API puisse bien vous identifier et vous renvoyer une réponse. 

```{r}
#| eval: true
#| code-fold: true
#| code-summary: Cliquez pour voir la réponse
#| code-overflow: scroll

headers <- httr::add_headers("Content-Type" = "application/json",
                             "X-Application-Id" = X_API_ID,
                             "X-Api-Key" = X_API_KEY)
```

8. Vous pouvez dès à présent envoyer votre requête. Notez qu'on va utilisez ici la méthode POST, notamment car on a besoin d'une authentification. Si vous souhaitez aller un peu plus loin sur les différences entre les méthodes **GET** et **POST**, vous pouvez regarder ce [post](https://www.ionos.fr/digitalguide/sites-internet/developpement-web/get-vs-post/).

```{r}
#| eval: true
#| code-fold: true
#| code-summary: Cliquez pour voir la réponse
#| code-overflow: scroll

response <- httr::POST(ROUTES_API_URL, body = json, encode = "json", headers)

content <- httr::content(response)
```


9. Vérifiez que votre requête a bien été reçue et traitée par l'API en regardant le code de retour, celui-ci doit être égal à 200. Si c'est bien le cas, regardez la réponse de l'API.


```{r}
#| eval: true
#| class-output: output
#| code-fold: true
#| code-summary: Cliquez pour voir la réponse
#| code-overflow: scroll

if (httr::status_code(response) == 200) {
  print("La requête a bien été traitée")
  content <- httr::content(response, as = "parsed")
  print(content)
} else {
  # Affichage d'un message d'erreur si le code de la réponse n'est pas 200
    print(sprintf("Une erreur est survenue. Code de la réponse : %d", httr::status_code(response)))
}
```

:::


On encapsule le code précédent dans une fonction qui envoie une requête contenant un JSON (en chaine de caractères) à l'endpoint d'une API de TravelTime et qui renvoie le contenu et le code de la réponse de l'API

**Chunk de code donné aux participants**

```{r}
#| class-output: output

getTraveltimeAPIResponse <- function(apiUrl, json){
  # On prépare les headers
  headers <- httr::add_headers("Content-Type" = "application/json",
                               "X-Application-Id" = X_API_ID,
                               "X-Api-Key" = X_API_KEY)
  # On envoie la requête avec les headers spécifiés
  response <- httr::POST(apiUrl, body = json, encode = "json", headers)
  # On récupère le contenu de la réponse
  content <- httr::content(response)
  # On récupère le code de la réponse
  code <- httr::status_code(response)
  return(list(content, code))
}
```

Tester la fonction *getTraveltimeAPIResponse* avec l'endpoint et le json de test précédents et analyser le contenu de la réponse de l'API

**CHUNK DE CODE A ECRIRE**

```{r}
#| echo: FALSE
#| class-output: output

response <- getTraveltimeAPIResponse(ROUTES_API_URL, json)
#View(response) # Ne marche pas pour les rendus Quarto
response # Très long à afficher dans les rendus Quarto
```

Après analyse du contenu de la réponse avec la fonction *View*, extraire dans une variable R la liste des descriptions des itinéraires trouvés (liste nommée *properties* dans le JSON)

**CHUNK DE CODE A ECRIRE**

```{r}
#| echo: FALSE
#| class-output: output

apiData <- response[[1]]$results[[1]]$locations[[1]]$properties
#View(apiData) # Ne marche pas pour les rendus Quarto
apiData # Très long à afficher dans les rendus Quarto
```
